main = toupper("Histogram of GP Registrar"),
xlab = "Approximately normally distributed data",
col = "pink")
# plot a boxplot
gpRegistrarBox <-
boxplot(df.no.wales$gp_registrar,
main = toupper("Boxplot of GP Registrar"),
xlab = "GP Registrar Boxplot",
ylab = "Frequency",
col = "pink")
# GP Retainer
gpRetainerHist <-
hist(df.no.wales$gp_retainer,
main = toupper("Histogram of GP Retainer"),
xlab = "Approximately normally distributed data",
col = "pink")
# plot a boxplot
gpRetainerBox <-
boxplot(df.no.wales$gp_retainer,
main = toupper("Boxplot of GP Retainer"),
xlab = "GP Retainer Boxplot",
ylab = "Frequency",
col = "pink")
# GP Locum
gpLocumHist <-
hist(df.no.wales$gp_locum,
main = toupper("Histogram of GP Locum"),
xlab = "Approximately normally distributed data",
col = "pink")
# plot a boxplot
gpLocumBox <-
boxplot(df.no.wales$gp_locum,
main = toupper("Boxplot of GP Locum"),
xlab = "GP Locum Boxplot",
ylab = "Frequency",
col = "pink")
# Total
gpTotalHist <-
hist(df.no.wales$total,
main = toupper("Histogram of Total"),
xlab = "Approximately normally distributed data",
col = "pink")
# plot a boxplot
gpTotalHist <-
boxplot(df.no.wales$total,
main = toupper("Boxplot of Total"),
xlab = "Total Boxplot",
ylab = "Frequency",
col = "pink")
# set new url
url.pop <- "https://statswales.gov.wales/Catalogue/Population-and-Migration/Population/Estimates/Local-Health-Boards/populationestimates-by-welshhealthboard-year"
# grab content from url
content.pop <- read_html(url.pop)
# grab the tables from the page
get.tables.pop <- content.pop %>%
html_element("table") %>%
html_table()
# first only select what columns to keep
slice.pop1 <- get.tables.pop %>%
subset(select = 2:14)
# now select what rows to keep
slice.pop2 <- slice.pop1[c(25:32),]
# drop the area code
slice.pop3 <- slice.pop2[c(-2)]
# get the years
slice.pop.years <- get.tables.pop[15:25]
slice.pop.years <- slice.pop.years[c(18),]
# get the areas
slice.pop.areas <- slice.pop3[1]
# Get all data without areas
df.pop <- slice.pop3[-1]
# set the column names (years)
df.pop <- setNames(df.pop, slice.pop.years)
# de-string the numbers ( ## this was an issue >.< ## )
df.pop <- lapply(df.pop, destring)
# check the class again
class(df.pop)
# the class is a list, which we want as a dataframe again as numeric.
df.pop <- data.frame(matrix(unlist(df.pop),
ncol = 11,
nrow = 8),
stringsAsFactors = FALSE)
# finally converted from character/list to df.
class(df.pop)
# get the years, but only keep the years and remove 'Mid-year'
# and trim the white space, just to make sure.
slice.pop.years <-
slice.pop.years %>%
str_replace_all('Mid-year', '') %>%
trimws()
# add the col names with setNames
df.pop <- setNames(df.pop, slice.pop.years)
# column bind the Health Board Areas with df.pop
df.pop <- cbind(slice.pop.areas, df.pop)
# sanity check
df.pop
df.pop <- rename(df.pop, "Health Board" = "X2")
# add Total again
df.pop$Total <- rowSums(df.pop[-1])
# name col names to lower
names(df.pop) <- tolower(names(df.pop))
# remove spaces
names(df.pop) <- sub(" ", "_", names(df.pop))
# update the col names pop
col.names.pop <- c("Health Board", slice.pop.years)
# change LHBs to shorter version.
df.pop.no.wales$health_board <- row.names1
df.pop.no.wales
# update the col names pop
col.names.pop <- c("Health Board", slice.pop.years)
plot.two <-
ggplot(df.pop, aes(health_board, total, fill = health_board)) +
geom_col() +
geom_text(aes(label = total, y = (total/2)), size = 3) +
labs(title = "Population estimates", subtitle = "by local health boards and year (2009:2019)") +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
df.pop.no.wales
View(df.pop)
# update the col names pop
col.names.pop <- c("Health Board", slice.pop.years)
plot.two <-
ggplot(df.pop, aes(health_board, total, fill = health_board)) +
geom_col() +
geom_text(aes(label = total, y = (total/2)), size = 3) +
labs(title = "Population estimates", subtitle = "by local health boards and year (2009:2019)") +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
#write.csv(df.pop.no.wales, 'pop-estimates.csv')
plot.two.no.wales <-
ggplot(df.pop[-1,], aes(health_board, total, fill = health_board)) +
geom_col() +
geom_text(aes(label = total, y = (total/2)), size = 3) +
labs(title = "Population estimates",
subtitle = "by local health boards and year (2009 - 2019)") +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# write.csv(df.pop.no.wales, file = "data/pop-estimations.csv")
noWalesA <-
ggplot(df.no.wales, aes(health_board, total, fill = health_board)) +
geom_col() +
geom_text(aes(label = total, y = (total/2)), size = 3) +
labs(title = str_to_title("Number of general practitioners in employment"),
subtitle = str_to_title("per local health board")) +
labs(title = str_to_title("GPs Employed")) + theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
noWalesB <-
ggplot(df.pop.no.wales, aes(health_board, total, fill = health_board)) +
geom_col() +
geom_text(aes(label = total, y = (total/2)), size = 3) +
labs(title = str_to_title("Population estimates"),
subtitle = str_to_title("by local health boards and year ")) +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# now remove wales
df.pop.no.wales <- df
df.pop.no.wales$health_board <- row.names1
# save df.pop without wales
df.pop.no.wales <- df.pop[-1,]
df.pop.no.wales
# renamre the health boards
df.pop.no.wales$health_board <- row.names1
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(rvest)
library(tidyverse)
library(taRifx)
library(funModeling)
library(patchwork)
# set url
url <- 'https://statswales.gov.wales/Catalogue/Health-and-Social-Care/General-Medical-Services/number-of-gps-employed-in-general-practices'
# grab content from url
content <- read_html(url)
get.tables <- content %>%
html_element("table") %>%
html_table()
# first only select what columns to keep
slice.one <- get.tables %>%
subset(select = 1:7)
# now select what rows to keep
slice.two <- slice.one[c(18:25),]
# only keep the gp staff data
mydf.staff.gp <- slice.two[1:7]
# kept row names in as can't add them later
# row.names1 = slice.two[,1]
# shorten the names manually.
row.names = c("Wales", "Betsi Cadwaladr Uni",
"Powys Teaching", "Hywel Dda Uni",
"Swansea Bay Uni", "Cwm Taf Morgannwg Uni",
"Aneurin Bevan Uni", "Cardiff and Vale Uni")
# set the names of the table (should be sliced but typing is easier atm.)
col.names <- c("Local Health Board",
"GP Partner/Provider/SPartner","Salaried",
"GP Practitioner", "GP Registrar",
"GP Retainer", "GP Locum")
# Apply the names to the table (slice.two)
mydf.staff.gp <- setNames(mydf.staff.gp, col.names)
df.staff.gp <- data.frame(mydf.staff.gp)
# replace the "-", "*", "*" with 0's
df.staff.gp$GP.Retainer[3:5] <- c(0,0,0)
df.staff.gp$GP.Retainer %>% mean()
# replace doubles to numeric
# df.staff.gp <- lapply(df.staff.gp[-1], destring)
# this gave me issues, so is done manually below.
# can be done manually.
df.staff.gp$GP.Partner.Provider.SPartner[1] <- 1467
df.staff.gp$GP.Practitioner[1] <- 1963
print(df.staff.gp)
names(df.staff.gp) <- tolower(names(df.staff.gp))
# remove spaces
names(df.staff.gp) <- sub(" ", "_", names(df.staff.gp))
# check column classes
sapply(df.staff.gp, class)
# get list of the character classes
chars <- sapply(df.staff.gp, is.character)
# replace all chars with numeric instead
df.staff.gp[ , chars] <- as.data.frame(apply(df.staff.gp[ , chars], 2, as.numeric))
# sanity check it worked
sapply(df.staff.gp, class)
# write.csv(df.staff.gp, "data/staff-per-gp.csv")
# sum up the rows
# write.csv(df.staff.gp, file = "data/gp-number-check.csv")
df.staff.gp$total <- rowSums(df.staff.gp[,c(-1)])
# plot the data
barplot(df.staff.gp$total, main = "Total staff employed per local health board",
xlab = "Local Health Board",
ylab = "Total",
horiz = F,
col = rainbow(8),
legend.text = row.names,
args.legend = list(x = "topright"))
plot.one <-
ggplot(df.staff.gp, aes(row.names, total, fill = row.names)) +
geom_col() +
geom_text(aes(label = total, y = (total/2)), size = 3) +
labs(title = "Number of general practitioners in employment",
subtitle = "per local health board (30-September-2020)") +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
plot.one
gp.districts <-
(942 + 1095 + 851 + 765 + 581 + 263 + 694)
print(gp.districts)
print(5160 - (gp.districts))
#kable(gp.districts, caption = "Sanity check of GP districts")
# write.csv(x = df.staff.gp, "gp-Totals.csv", row.names = T)
df.no.wales <- df.staff.gp[2:7]
df.no.wales <- df.no.wales[c(-1),]
head(df.no.wales)
# shorten the names manually.
row.names1 = c("Betsi Cadwaladr Uni",
"Powys Teaching",
"Hywel Dda Uni",
"Swansea Bay Uni",
"Cwm Taf Morgannwg Uni",
"Aneurin Bevan Uni",
"Cardiff and Vale Uni")
# set the names of the table (should be sliced but typing is easier atm.)
col.names1 <- c("GP Partner/Provider/SPartner","Salaried",
"GP Practitioner", "GP Registrar",
"GP Retainer", "GP Locum")
# Apply the names to the table
df.no.wales <- setNames(df.no.wales, col.names1)
# add Total again
df.no.wales$Total <- rowSums(df.no.wales)
# name col names to lower
names(df.no.wales) <- tolower(names(df.no.wales))
# remove spaces
names(df.no.wales) <- sub(" ", "_", names(df.no.wales))
df.no.wales$health_board <- row.names1
plot.one.no.wales <-
ggplot(df.no.wales, aes(health_board, total, fill = health_board)) +
geom_col() + geom_text(aes(label = total, y = (total/2)), size = 3)
# write.csv(df.no.wales, file = "data/number-of-general.csv")
profiling_num(df.no.wales)
str(df.no.wales)
df_status(df.no.wales)
# write.csv(profiling_num(df.no.wales), file = "data/desc-gps-employed.csv")
# GP Partners
# save this plot as png
gpPartnerHist <-
hist(df.no.wales$`gp_partner/provider/spartner`,
main = toupper("Histogram of GP Partner/Provider/SPartner"),
xlab = "Approximately normally distributed data",
col = "pink")
# plot a boxplot
gpPartnerBoxplot <-
boxplot(df.no.wales$`gp_partner/provider/spartner`,
main = toupper("Boxplot of the GP Partner/Provider/SPartner"),
xlab = "Staff Boxplot",
ylab = "Frequency",
col = "pink")
# Salaried
gpSalariedHist <-
hist(df.no.wales$salaried,
main = toupper("Histogram of Salaried"),
xlab = "Approximately normally distributed data",
col = "pink")
# plot a boxplot
gpSalariedBox <-
boxplot(df.no.wales$salaried,
main = toupper("Boxplot of the Salaried"),
xlab = "Salaried Boxplot",
ylab = "Frequency",
col = "pink")
# GP Practitioner
gpPractitionerHist <- hist(df.no.wales$gp_practitioner,
main = toupper("Histogram of GP Practitioner"),
xlab = "Approximately normally distributed data",
col = "pink")
# plot a boxplot
gpPractitionerBox <- boxplot(df.no.wales$gp_practitioner,
main = toupper("Boxplot of the GP Practitioner"),
xlab = "GP Practitioner Boxplot",
ylab = "Frequency",
col = "pink")
# GP Registrar
gpRegistrarHist <-
hist(df.no.wales$gp_registrar,
main = toupper("Histogram of GP Registrar"),
xlab = "Approximately normally distributed data",
col = "pink")
# plot a boxplot
gpRegistrarBox <-
boxplot(df.no.wales$gp_registrar,
main = toupper("Boxplot of GP Registrar"),
xlab = "GP Registrar Boxplot",
ylab = "Frequency",
col = "pink")
# GP Retainer
gpRetainerHist <-
hist(df.no.wales$gp_retainer,
main = toupper("Histogram of GP Retainer"),
xlab = "Approximately normally distributed data",
col = "pink")
# plot a boxplot
gpRetainerBox <-
boxplot(df.no.wales$gp_retainer,
main = toupper("Boxplot of GP Retainer"),
xlab = "GP Retainer Boxplot",
ylab = "Frequency",
col = "pink")
# GP Locum
gpLocumHist <-
hist(df.no.wales$gp_locum,
main = toupper("Histogram of GP Locum"),
xlab = "Approximately normally distributed data",
col = "pink")
# plot a boxplot
gpLocumBox <-
boxplot(df.no.wales$gp_locum,
main = toupper("Boxplot of GP Locum"),
xlab = "GP Locum Boxplot",
ylab = "Frequency",
col = "pink")
# Total
gpTotalHist <-
hist(df.no.wales$total,
main = toupper("Histogram of Total"),
xlab = "Approximately normally distributed data",
col = "pink")
# plot a boxplot
gpTotalHist <-
boxplot(df.no.wales$total,
main = toupper("Boxplot of Total"),
xlab = "Total Boxplot",
ylab = "Frequency",
col = "pink")
# set new url
url.pop <- "https://statswales.gov.wales/Catalogue/Population-and-Migration/Population/Estimates/Local-Health-Boards/populationestimates-by-welshhealthboard-year"
# grab content from url
content.pop <- read_html(url.pop)
# grab the tables from the page
get.tables.pop <- content.pop %>%
html_element("table") %>%
html_table()
# first only select what columns to keep
slice.pop1 <- get.tables.pop %>%
subset(select = 2:14)
# now select what rows to keep
slice.pop2 <- slice.pop1[c(25:32),]
# drop the area code
slice.pop3 <- slice.pop2[c(-2)]
# get the years
slice.pop.years <- get.tables.pop[15:25]
slice.pop.years <- slice.pop.years[c(18),]
# get the areas
slice.pop.areas <- slice.pop3[1]
# Get all data without areas
df.pop <- slice.pop3[-1]
# set the column names (years)
df.pop <- setNames(df.pop, slice.pop.years)
# de-string the numbers ( ## this was an issue >.< ## )
df.pop <- lapply(df.pop, destring)
# check the class again
class(df.pop)
# the class is a list, which we want as a dataframe again as numeric.
df.pop <- data.frame(matrix(unlist(df.pop),
ncol = 11,
nrow = 8),
stringsAsFactors = FALSE)
# finally converted from character/list to df.
class(df.pop)
# get the years, but only keep the years and remove 'Mid-year'
# and trim the white space, just to make sure.
slice.pop.years <-
slice.pop.years %>%
str_replace_all('Mid-year', '') %>%
trimws()
# add the col names with setNames
df.pop <- setNames(df.pop, slice.pop.years)
# column bind the Health Board Areas with df.pop
df.pop <- cbind(slice.pop.areas, df.pop)
# sanity check
df.pop
df.pop <- rename(df.pop, "Health Board" = "X2")
# add Total again
df.pop$Total <- rowSums(df.pop[-1])
# name col names to lower
names(df.pop) <- tolower(names(df.pop))
# remove spaces
names(df.pop) <- sub(" ", "_", names(df.pop))
# now remove wales
df.pop.no.wales <- df
# save df.pop without wales
df.pop.no.wales <- df.pop[-1,]
# renamre the health boards
df.pop.no.wales$health_board <- row.names1
# update the col names pop
col.names.pop <- c("Health Board", slice.pop.years)
plot.two <-
ggplot(df.pop, aes(health_board, total, fill = health_board)) +
geom_col() +
geom_text(aes(label = total, y = (total/2)), size = 3) +
labs(title = "Population estimates", subtitle = "by local health boards and year (2009:2019)") +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
#write.csv(df.pop.no.wales, 'pop-estimates.csv')
plot.two.no.wales <-
ggplot(df.pop[-1,], aes(health_board, total, fill = health_board)) +
geom_col() +
geom_text(aes(label = total, y = (total/2)), size = 3) +
labs(title = "Population estimates",
subtitle = "by local health boards and year (2009 - 2019)") +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# write.csv(df.pop.no.wales, file = "data/pop-estimations.csv")
noWalesA <-
ggplot(df.no.wales, aes(health_board, total, fill = health_board)) +
geom_col() +
geom_text(aes(label = total, y = (total/2)), size = 3) +
labs(title = str_to_title("Number of general practitioners in employment"),
subtitle = str_to_title("per local health board")) +
labs(title = str_to_title("GPs Employed")) + theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
noWalesB <-
ggplot(df.pop.no.wales, aes(health_board, total, fill = health_board)) +
geom_col() +
geom_text(aes(label = total, y = (total/2)), size = 3) +
labs(title = str_to_title("Population estimates"),
subtitle = str_to_title("by local health boards and year ")) +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
noWalesA +
noWalesB +
plot_layout(nrow = 2, guides = "collect")
structure(df.pop.no.wales)
descPopNoWales <- str(df.pop.no.wales)
#write.csv(descPopNoWales, "data/tidy/desc-pop-no-wales.csv")
profiling_num(df.pop.no.wales)
# write.csv(profiling_num(df.pop.no.wales), file = "data/desc-population.csv")
# remove health board
tempD <- df.pop[-1]
# remove Wales
tempD <- tempD[-1,]
# remove Total
tempD <- tempD[1:11]
# create a time series object as tempD
tempD %>% ts(start = 2009, frequency = 1) -> tempTS
flipD <- t(tempD)
flipNames <- t(slice.pop.areas)
flipNames <- flipNames[-1]
flipD <- colnames(flipNames)
# create a time vector
time <- 1:length(flipD)
# check the summary
summary(flipD)
#plot.ts(flipD)
df.bevan1 <- rbind(df.pop.no.wales[6,])
df.bevan2 <- df.no.wales[6,]
print(paste(round(df.bevan1$Total/df.bevan2$Total), "people need to be seen by 1 doctor."))
# add a random entry to the dataframe
visitsPer1K = vector()
# visitsPer1K$LHB <- row.names1
citation(package = "knitr")
citation(package = "rvest")
citation(package = "tidyverse")
citation(package = "taRifx")
# write.csv(df.pop.no.wales, "data/population-estimates.csv")
# Remove everything which we no longer need to free up some memory/RAM.
# rm(list = ls())
# gc()
